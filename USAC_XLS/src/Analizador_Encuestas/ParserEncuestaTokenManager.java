/* Generated By:JavaCC: Do not edit this line. ParserEncuestaTokenManager.java */
package Analizador_Encuestas;
import Estructuras.*;
import GeneracionXFORM.*;

/** Token Manager. */
public class ParserEncuestaTokenManager implements ParserEncuestaConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x7fffffffffe0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x555555555540L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200028000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x820L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20008000080L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80802a80000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30240000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400050000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x882a81040L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000400L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x48030000100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100d500080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000002000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x48400000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000020L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x28400L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x110d500080L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000800L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2220000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x210840000200L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20010000100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000001000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x104000004000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xb0000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000040L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8050000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x810002100L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20029000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4440000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x401000000400L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x5000800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000000200L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x102080280000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800020L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(5, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x420000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x100a804220L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x28100L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xa040050000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000282400L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4900500000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2850008c0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x28015000c40L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x50200L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x14800282000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x42000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x82d04000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1008000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x500001100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x28000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x52008001000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1002d04000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000280100L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200050000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x105002000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200100008a0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x50000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000008a0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x9000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2002800000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4010000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x280000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x805000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000500200L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x28000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20008004000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000001140L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(9, 5);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(9, 11);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(9, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(9, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1140L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x4005000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0xb000280000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20802820000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x50000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x40010008000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(10, 6);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(10, 8);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(10, 12);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(10, 23);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 29);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(10, 41);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0xa000000200L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40008000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x14008500000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x12000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x41005040000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x290000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(11, 15);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(11, 19);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(11, 30);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(11, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(11, 42);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x14000000400L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x4200000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x1008000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x500000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x2040000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(12, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(12, 17);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(12, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(12, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x12000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x4200000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(13, 18);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(13, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x4200000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(14, 21);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(14, 26);
         break;
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(15, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(15, 27);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(16, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 126)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 126 && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\74\145\156\143\165\145\163\164\141\76", 
"\74\57\145\156\143\165\145\163\164\141\76", "\74\160\162\145\147\165\156\164\141\76", 
"\74\57\160\162\145\147\165\156\164\141\76", "\74\151\144\160\162\145\147\165\156\164\141\76", 
"\74\57\151\144\160\162\145\147\165\156\164\141\76", "\74\145\164\151\161\165\145\164\141\76", 
"\74\57\145\164\151\161\165\145\164\141\76", "\74\163\165\147\145\162\151\162\76", "\74\57\163\165\147\145\162\151\162\76", 
"\74\143\157\144\151\147\157\137\160\162\145\76", "\74\57\143\157\144\151\147\157\137\160\162\145\76", 
"\74\143\157\144\151\147\157\137\160\157\163\164\76", "\74\57\143\157\144\151\147\157\137\160\157\163\164\76", 
"\74\162\145\163\164\162\151\156\147\151\162\76", "\74\57\162\145\163\164\162\151\156\147\151\162\76", 
"\74\162\145\163\164\162\151\156\147\151\162\155\163\156\76", "\74\57\162\145\163\164\162\151\156\147\151\162\155\163\156\76", 
"\74\162\145\161\165\145\162\151\144\157\76", "\74\57\162\145\161\165\145\162\151\144\157\76", 
"\74\162\145\161\165\145\162\151\144\157\155\163\156\76", "\74\57\162\145\161\165\145\162\151\144\157\155\163\156\76", 
"\74\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", "\74\57\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", 
"\74\141\160\154\151\143\141\142\154\145\76", "\74\57\141\160\154\151\143\141\142\154\145\76", 
"\74\154\145\143\164\165\162\141\76", "\74\57\154\145\143\164\165\162\141\76", "\74\143\141\154\143\165\154\157\76", 
"\74\57\143\141\154\143\165\154\157\76", "\74\162\145\160\145\164\151\143\151\157\156\76", 
"\74\57\162\145\160\145\164\151\143\151\157\156\76", "\74\155\165\154\164\151\155\145\144\151\141\76", 
"\74\57\155\165\154\164\151\155\145\144\151\141\76", "\74\141\160\141\162\151\145\156\143\151\141\76", 
"\74\57\141\160\141\162\151\145\156\143\151\141\76", "\74\160\141\162\141\155\145\164\162\157\76", 
"\74\57\160\141\162\141\155\145\164\162\157\76", "\74\162\165\164\141\76", "\74\57\162\165\164\141\76", 
"\74\164\151\160\157\76", "\74\57\164\151\160\157\76", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[3];
static private final int[] jjstateSet = new int[6];
static protected char curChar;
/** Constructor. */
public ParserEncuestaTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserEncuestaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
