
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(ParserEncuesta)
package Analizador_Encuestas;
import Estructuras.*;
import GeneracionXFORM.*;

public class ParserEncuesta {
    
    private static Generador_XForm generador = new Generador_XForm();
    private static String nm="";
    public void  initParser() throws ParseException, TokenMgrError
    { 
        Inicio();
    }


}

PARSER_END(ParserEncuesta)

///LEXICO
SKIP:
{
    " "|"\r\n"|"\t"|"\n"
}

TOKEN :
{
<ENCUESTA_OPEN: "<encuesta>">
|<ENCUESTA_CLOSE: "</encuesta>">
|<PREGUNTA_OPEN: "<pregunta>">
|<PREGUNTA_CLOSE: "</pregunta>">
|<IDPREGUNTA_OPEN: "<idpregunta>">
|<IDPREGUNTA_CLOSE: "</idpregunta>">

|<ETIQUETA_OPEN: "<etiqueta>">
|<ETIQUETA_CLOSE: "</etiqueta>">

|<SUGERIR_OPEN: "<sugerir>">
|<SUGERIR_CLOSE: "</sugerir>">
|<CODIGOPRE_OPEN: "<codigo_pre>">
|<CODIGOPRE_CLOSE: "</codigo_pre>">
|<CODIGOPOST_OPEN: "<codigo_post>">
|<CODIGOPOST_CLOSE: "</codigo_post>">
|<RESTRINGIR_OPEN: "<restringir>">
|<RESTRINGIR_CLOSE: "</restringir>">
|<RESTRINGIRMSN_OPEN: "<restringirmsn>">
|<RESTRINGIRMSN_CLOSE: "</restringirmsn>">
|<REQUERIDO_OPEN: "<requerido>">
|<REQUERIDO_CLOSE: "</requerido>">
|<REQUERIDOMSN_OPEN: "<requeridomsn>">
|<REQUERIDOMSN_CLOSE: "</requeridomsn>">
|<PREDETERMINADO_OPEN: "<predeterminado>">
|<PREDETERMINADO_CLOSE: "</predeterminado>">
|<APLICABLE_OPEN: "<aplicable>">
|<APLICABLE_CLOSE: "</aplicable>">
|<LECTURA_OPEN: "<lectura>">
|<LECTURA_CLOSE: "</lectura>">
|<CALCULO_OPEN: "<calculo>">      
|<CALCULO_CLOSE: "</calculo>">
|<REPETICION_OPEN: "<repeticion>">
|<REPETICION_CLOSE: "</repeticion>">
|<MULTIMEDIA_OPEN: "<multimedia>">
|<MULTIMEDIA_CLOSE: "</multimedia>">
|<APARIENCIA_OPEN: "<apariencia>">
|<APARIENCIA_CLOSE: "</apariencia>">
|<PARAMETRO_OPEN: "<parametro>">
|<PARAMETRO_CLOSE: "</parametro>">
|<RUTA_OPEN: "<ruta>">
|<RUTA_CLOSE: "</ruta>">


|<TIPO_OPEN: "<tipo>">
|<TIPO_CLOSE: "</tipo>">
|<VALOR: "~" (~["~"])* "~">

}



void Inicio() :
{}
{
    Encuesta() <EOF>
}

void Encuesta() :
{}
{
    <ENCUESTA_OPEN>(Fila())*<ENCUESTA_CLOSE> 
    {
        //Se genera el codigo XFORM
        generador.generar_CODIGO_XFORM();
    }
}

void Fila():
{}
{
    (<PREGUNTA_OPEN> {Pregunta n_pre = generador.generar_Pregunta();} 
    Pregunta() <PREGUNTA_CLOSE> )//o agrupacion o preguntas
    {
        //Se crea la pregunta
        
        generador.agregar_Pregunta();
    }
}

void Pregunta():
{}
{
    (Columna())*
}

void Columna():
{Token t; }
{
    (
        t=Tipo()       
       |t=IdPregunta() 
       |t=Etiqueta() 
       |t=RequeridoMsn()
       |t=Ruta()
       |t=Requerido()
       |t=Restringir()
       |t=Predeterminado()
       |t=Codigo_Pre()
       |t=Codigo_Post()
       |t=Lectura()
    )
    {
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        //Para agregar el atributo se setea la linea
        generador.set_linea_actual(t.beginLine);
        //Para agregar el atributo se setea la columna
        generador.set_linea_actual(t.beginColumn);
        //Se Agregar el Atributo a la pregunta
        generador.agregarAtributo(nm,t.image);

        
    }
}

/*----------------------------___COLUMNAS___----------------------------------*/
Token Tipo():
{Token t;}
{
    <TIPO_OPEN> t=<VALOR> <TIPO_CLOSE>             {nm="tipo"; return t;}
}

Token IdPregunta():
{Token t;}
{
    <IDPREGUNTA_OPEN> t=<VALOR> <IDPREGUNTA_CLOSE> { nm="idpregunta"; return t;}
}

Token RequeridoMsn():
{Token t;}
{
    <REQUERIDOMSN_OPEN> t=<VALOR> <REQUERIDOMSN_CLOSE> { nm="requeridomsn"; return t;}
}

Token Ruta():
{Token t;}
{
    <RUTA_OPEN> t=<VALOR> <RUTA_CLOSE> { nm="ruta"; return t;}
}

Token Requerido():
{Token t;}
{
    <REQUERIDO_OPEN> t=<VALOR> <REQUERIDO_CLOSE> { nm="requerido"; return t;}
}

Token Lectura():
{Token t;}
{
    <LECTURA_OPEN> t=<VALOR> <LECTURA_CLOSE> { nm="lectura"; return t;}
}


Token Restringir():
{Token t;}
{
    <RESTRINGIR_OPEN> t=<VALOR> <RESTRINGIR_CLOSE> { nm="restringir"; return t;}
}

Token Predeterminado():
{Token t;}
{
    <PREDETERMINADO_OPEN> t=<VALOR> <PREDETERMINADO_CLOSE> { nm="predeterminado"; return t;}
}

Token Codigo_Pre():
{Token t;}
{
    <CODIGOPRE_OPEN> t=<VALOR> <CODIGOPRE_CLOSE> { nm="codigo_pre"; return t;}
}

Token Codigo_Post():
{Token t;}
{
    <CODIGOPOST_OPEN> t=<VALOR> <CODIGOPOST_CLOSE> { nm="codigo_pre"; return t;}
}

void Calculo():
{Token t;}
{
    <CALCULO_OPEN> t=<VALOR> <CALCULO_CLOSE> {System.out.println(t.image); }
}


Token Etiqueta():
{Token t;}
{
    <ETIQUETA_OPEN> t=<VALOR> <ETIQUETA_CLOSE> {nm="etiqueta"; return t; }
}


