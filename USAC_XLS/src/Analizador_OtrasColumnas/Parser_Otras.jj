

options {
  LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(ParserOtras)
package Analizador_OtrasColumnas;


public class ParserOtras {

    public String  initParser() throws ParseException, TokenMgrError
    { 
        return (contenido_etiqueta());
    }

}

PARSER_END(ParserOtras)

/*-=-=-=-=-=-=-=-=-=     LEXICO       -=-=-=-=-=-=-=-=-=-=-=*/

SKIP:
{
    "\r\n"|"\t"|"\n"
}

TOKEN :
{
<ID: (["a"-"z","A"-"Z"]("_")?)(["a"-"z","A"-"Z"]|["0"- "9"]|"_")*>
|<Numeral : "#">
|<Acor : "[" >
|<Ccor : "]" >
|<Punto: ".">
|<PuntoP: "..">
|<Cualquiera : (~["#",".","\"", "[", "]"," "])+ >
|<string_literal: "\"" (~["\""])* "\"">
}

SKIP:
{ 
    " "
}
/*-=-=-=-=-=-=-         SINTACTICO          -=-=-=-=-=-=-=-=-=-=-=-=-=*/



String contenido_etiqueta():
{String Cad;}
{
    (Cad = CNT() { return Cad; })+ <EOF> 
}


String CNT() :
{String Cad;
String aux;
}
{
Cad = VALOR() aux = CNT_2() {Cad = Cad + aux;  return Cad;}
}


String CNT_2() :
{
String Cad="";
String aux="";
String last="";
}
{
     (aux = VALOR()
     {
        try {
            String char_aux = aux.substring(0,1);
            if(last.equals(".") && char_aux.matches("^\\w"))
            {
                Cad= Cad.substring(0, Cad.length()-1);
                Cad+="pvnt0";
            }
            Cad += aux;
            last = aux;
        } catch (Exception e) {
        }

     })+  
 {   
    return Cad;
 }
| <EOF> {return "";}
}





String VALOR():
{Token t;}
{
t = <Cualquiera>                    {
                                        
                                        return t.image;
                                    }
|<Numeral> <Acor>  t=<ID>  <Ccor>   {
                                                
                                        return t.image +"()pvnt0respuesta";
                                    }
| <Punto>                           {
                                        
                                        return ".";
                                    }
| <PuntoP>                          {
                                        
                                        return "posicion()";
                                    }
| t=<string_literal>                {
                                        return t.image;
                                    }
|t=<ID>                             {
                                        return t.image;
                                    }

}
