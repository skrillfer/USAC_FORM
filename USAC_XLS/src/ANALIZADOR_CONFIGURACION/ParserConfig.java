/* Generated By:JavaCC: Do not edit this line. ParserConfig.java */
package ANALIZADOR_CONFIGURACION;
import Estructuras.*;
import java.util.ArrayList;

public class ParserConfig implements ParserConfigConstants {
    private static ArrayList<Struct_Form> LT_Structs = null;
    private static String Ftitulo="";
    private static String Fid="";
    private static String Festilo="";
    private static String Fimport="";
    private static String FcodM="";
    private static String FcodG="";

    public void  initParser() throws ParseException, TokenMgrError
    {
        Ftitulo="";
        Fid="";
        Festilo="";
        Fimport="";
        FcodM="";
        FcodG="";
        LT_Structs = new ArrayList<Struct_Form>();
        Inicio();
    }

    public ArrayList<Struct_Form> getLT()
    {
        return this.LT_Structs;
    }

  final public void Inicio() throws ParseException {
    Formulario();
    jj_consume_token(0);
  }

  final public void Formulario() throws ParseException {
    jj_consume_token(CONFIGURACIONES_OPEN);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILA_OPEN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Fila();
    }
    jj_consume_token(CONFIGURACIONES_CLOSE);

  }

  final public void Fila() throws ParseException {
    jj_consume_token(FILA_OPEN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITULO_OPEN:
      case IDFORM_OPEN:
      case ESTILO_OPEN:
      case IMPORTAR_OPEN:
      case CODMAIN_OPEN:
      case CODGLOB_OPEN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Columnas();
    }
    jj_consume_token(FILA_CLOSE);
        LT_Structs.add(new Struct_Form(Ftitulo,Fid,Festilo,Fimport,FcodM,FcodG));

        Ftitulo="";
        Fid="";
        Festilo="";
        Fimport="";
        FcodM="";
        FcodG="";
  }

  final public void Columnas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TITULO_OPEN:
      Titulo();
      break;
    case IDFORM_OPEN:
      IdForm();
      break;
    case ESTILO_OPEN:
      Estilo();
      break;
    case IMPORTAR_OPEN:
      Importar();
      break;
    case CODMAIN_OPEN:
      CodigoPrincipal();
      break;
    case CODGLOB_OPEN:
      CodigoGlobal();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Titulo() throws ParseException {
    Token t;
    jj_consume_token(TITULO_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(TITULO_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            Ftitulo = t.image;
        }
  }

  final public void IdForm() throws ParseException {
    Token t;
    jj_consume_token(IDFORM_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(IDFORM_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            Fid = t.image;
        }
  }

  final public void Estilo() throws ParseException {
    Token t;
    jj_consume_token(ESTILO_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(ESTILO_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            Festilo = t.image;
        }
  }

  final public void Importar() throws ParseException {
    Token t;
    jj_consume_token(IMPORTAR_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(IMPORTAR_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            Fimport = t.image;
        }
  }

  final public void CodigoPrincipal() throws ParseException {
    Token t;
    jj_consume_token(CODMAIN_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(CODMAIN_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            FcodM = t.image;
        }
  }

  final public void CodigoGlobal() throws ParseException {
    Token t;
    jj_consume_token(CODGLOB_OPEN);
    t = jj_consume_token(VALOR);
    jj_consume_token(CODGLOB_CLOSE);
        try {
            t.image = t.image.substring(1, t.image.length()-1);
        } catch (Exception e) {}
        if(!t.image.equals("") && !t.image.equals("\u005c"\u005c""))
        {
            FcodG = t.image;
        }
  }

  /** Generated Token Manager. */
  public ParserConfigTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0xaaa00,0xaaa00,};
   }

  /** Constructor with InputStream. */
  public ParserConfig(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserConfig(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserConfigTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserConfig(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserConfigTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserConfig(ParserConfigTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserConfigTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
