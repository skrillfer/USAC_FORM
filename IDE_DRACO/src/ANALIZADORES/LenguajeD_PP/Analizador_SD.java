
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 15 20:36:06 CST 2018
//----------------------------------------------------

package ANALIZADORES.LenguajeD_PP;

import java_cup.runtime.*;
import java.util.*;
import ESTRUCTURAS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 15 20:36:06 CST 2018
  */
public class Analizador_SD extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_SD() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_SD(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_SD(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\012" +
    "\002\000\002\012\003\000\002\013\004\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\027\007\000\002\030\004\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\017\006\000\002\015\006\000\002\015\006" +
    "\000\002\016\007\000\002\016\007\000\002\020\004\000" +
    "\002\020\003\000\002\021\005\000\002\022\003\000\002" +
    "\023\005\000\002\026\005\000\002\026\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\004\003\000" +
    "\002\005\002\000\002\005\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\022\002\uffff\007\020\042\004\043\023\044" +
    "\007\045\005\046\006\051\017\001\002\000\004\007\uffe1" +
    "\001\002\000\004\007\uffe4\001\002\000\004\007\uffe2\001" +
    "\002\000\004\007\uffe5\001\002\000\022\002\ufff9\007\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\001" +
    "\002\000\004\002\152\001\002\000\022\002\ufffc\007\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\051\ufffc\001" +
    "\002\000\022\002\ufffa\007\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\051\ufffa\001\002\000\022\002\ufff8\007" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\051\ufff8" +
    "\001\002\000\022\002\ufffe\007\020\042\004\043\023\044" +
    "\007\045\005\046\006\051\017\001\002\000\022\002\ufffb" +
    "\007\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\051" +
    "\ufffb\001\002\000\004\007\140\001\002\000\006\007\126" +
    "\030\130\001\002\000\004\007\024\001\002\000\004\002" +
    "\000\001\002\000\004\007\uffe3\001\002\000\012\023\116" +
    "\025\uffdf\026\uffdf\030\uffdf\001\002\000\010\025\026\026" +
    "\uffde\030\027\001\002\000\004\007\115\001\002\000\026" +
    "\004\040\005\051\006\043\007\042\011\034\017\035\021" +
    "\037\041\045\047\033\050\044\001\002\000\004\026\031" +
    "\001\002\000\024\002\ufff0\007\ufff0\022\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\051\ufff0\001\002\000\010" +
    "\026\uffdd\037\054\040\053\001\002\000\046\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\020\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\001\002\000\024\004\040" +
    "\005\051\006\043\007\042\011\034\017\035\021\037\047" +
    "\033\050\044\001\002\000\026\004\040\005\051\006\043" +
    "\007\042\011\034\017\035\021\037\041\045\047\033\050" +
    "\044\001\002\000\046\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\001\002\000\026\004\040\005\051\006\043\007" +
    "\042\011\034\017\035\021\037\041\045\047\033\050\044" +
    "\001\002\000\046\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\020\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\001\002\000\046\010\066\011\057\012\063\013\070" +
    "\014\061\020\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\031" +
    "\062\032\060\033\064\034\067\035\071\036\065\037\uffd2" +
    "\040\uffd2\001\002\000\046\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\001\002\000\046\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\001\002\000\046\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\001\002\000\026\004\040\005\051" +
    "\006\043\007\042\011\034\017\035\021\037\041\045\047" +
    "\033\050\044\001\002\000\020\020\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\037\uffd9\040\uffd9\001\002\000\046\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\020\uffca\022\uffca" +
    "\024\uffca\025\uffca\026\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\001\002\000\046" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\020\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000" +
    "\046\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\020\uffc7" +
    "\022\uffc7\024\uffc7\025\uffc7\026\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\001\002" +
    "\000\020\020\uffda\022\uffda\024\uffda\025\uffda\026\uffda\037" +
    "\uffda\040\uffda\001\002\000\026\004\040\005\051\006\043" +
    "\007\042\011\034\017\035\021\037\041\045\047\033\050" +
    "\044\001\002\000\026\004\040\005\051\006\043\007\042" +
    "\011\034\017\035\021\037\041\045\047\033\050\044\001" +
    "\002\000\020\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\037\uffdb\040\053\001\002\000\020\020\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\037\uffdc\040\uffdc\001\002\000\024" +
    "\004\040\005\051\006\043\007\042\011\034\017\035\021" +
    "\037\047\033\050\044\001\002\000\024\004\040\005\051" +
    "\006\043\007\042\011\034\017\035\021\037\047\033\050" +
    "\044\001\002\000\024\004\040\005\051\006\043\007\042" +
    "\011\034\017\035\021\037\047\033\050\044\001\002\000" +
    "\024\004\040\005\051\006\043\007\042\011\034\017\035" +
    "\021\037\047\033\050\044\001\002\000\024\004\040\005" +
    "\051\006\043\007\042\011\034\017\035\021\037\047\033" +
    "\050\044\001\002\000\024\004\040\005\051\006\043\007" +
    "\042\011\034\017\035\021\037\047\033\050\044\001\002" +
    "\000\024\004\040\005\051\006\043\007\042\011\034\017" +
    "\035\021\037\047\033\050\044\001\002\000\024\004\040" +
    "\005\051\006\043\007\042\011\034\017\035\021\037\047" +
    "\033\050\044\001\002\000\024\004\040\005\051\006\043" +
    "\007\042\011\034\017\035\021\037\047\033\050\044\001" +
    "\002\000\024\004\040\005\051\006\043\007\042\011\034" +
    "\017\035\021\037\047\033\050\044\001\002\000\024\004" +
    "\040\005\051\006\043\007\042\011\034\017\035\021\037" +
    "\047\033\050\044\001\002\000\032\010\066\011\057\012" +
    "\063\013\070\014\061\020\uffd3\022\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\037\uffd3\040\uffd3\001\002\000\046\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\061\020\uffce\022\uffce\024\uffce" +
    "\025\uffce\026\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\001\002\000\032\010\066" +
    "\011\057\012\063\013\070\014\061\020\uffd4\022\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\037\uffd4\040\uffd4\001\002\000\046" +
    "\010\uffd1\011\uffd1\012\063\013\070\014\061\020\uffd1\022" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\001\002\000" +
    "\032\010\066\011\057\012\063\013\070\014\061\020\uffd7" +
    "\022\uffd7\024\uffd7\025\uffd7\026\uffd7\037\uffd7\040\uffd7\001" +
    "\002\000\032\010\066\011\057\012\063\013\070\014\061" +
    "\020\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\037\uffd5\040" +
    "\uffd5\001\002\000\046\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\061\020\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\001\002\000\032\010\066\011\057\012\063\013" +
    "\070\014\061\020\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\037\uffd8\040\uffd8\001\002\000\046\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\001\002\000\032\010\066\011\057" +
    "\012\063\013\070\014\061\020\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\037\uffd6\040\uffd6\001\002\000\046\010\uffd0" +
    "\011\uffd0\012\063\013\070\014\061\020\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000\012\022" +
    "\uffe6\025\uffe6\037\054\040\053\001\002\000\006\022\110" +
    "\025\107\001\002\000\026\004\040\005\051\006\043\007" +
    "\042\011\034\017\035\021\037\041\045\047\033\050\044" +
    "\001\002\000\046\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\001\002\000\012\022\uffe7\025\uffe7\037\054\040\053" +
    "\001\002\000\010\020\113\037\054\040\053\001\002\000" +
    "\046\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\020\uffcb" +
    "\022\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002" +
    "\000\046\010\uffcc\011\uffcc\012\063\013\070\014\061\020" +
    "\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\001" +
    "\002\000\010\025\uffe0\026\uffe0\030\uffe0\001\002\000\026" +
    "\004\040\005\051\006\043\007\042\011\034\017\035\021" +
    "\037\041\045\047\033\050\044\001\002\000\010\023\116" +
    "\026\uffde\030\027\001\002\000\010\023\uffeb\026\uffeb\030" +
    "\uffeb\001\002\000\004\026\123\001\002\000\010\023\uffec" +
    "\026\uffec\030\uffec\001\002\000\024\002\uffee\007\uffee\022" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\051\uffee" +
    "\001\002\000\010\024\125\037\054\040\053\001\002\000" +
    "\010\023\uffea\026\uffea\030\uffea\001\002\000\012\023\116" +
    "\025\uffdf\026\uffdf\030\uffdf\001\002\000\010\025\026\026" +
    "\uffde\030\027\001\002\000\026\004\040\005\051\006\043" +
    "\007\042\011\034\017\035\021\037\041\045\047\033\050" +
    "\044\001\002\000\010\026\132\037\054\040\053\001\002" +
    "\000\024\002\ufff1\007\ufff1\022\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\051\ufff1\001\002\000\004\026\134" +
    "\001\002\000\024\002\uffef\007\uffef\022\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\051\uffef\001\002\000\010" +
    "\023\116\026\uffde\030\027\001\002\000\004\026\137\001" +
    "\002\000\024\002\uffed\007\uffed\022\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\051\uffed\001\002\000\004\021" +
    "\141\001\002\000\016\007\020\042\004\043\023\044\007" +
    "\045\005\046\006\001\002\000\020\007\020\022\150\042" +
    "\004\043\023\044\007\045\005\046\006\001\002\000\020" +
    "\007\ufff2\022\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\001\002\000\020\007\ufff3\022\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\001\002\000\020\007\ufff5\022" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001\002" +
    "\000\020\007\ufff4\022\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\001\002\000\020\007\ufff6\022\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\001\002\000\022\002" +
    "\ufff7\007\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\051\ufff7\001\002\000\022\002\ufffd\007\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\051\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\024\002\010\003\020\012\021\013\014\014" +
    "\011\015\015\016\012\017\013\027\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\020\014" +
    "\150\015\015\016\012\017\013\027\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\126\001\001\000" +
    "\004\004\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\116\021\117\001\001\000\004\005\027\001" +
    "\001\000\002\001\001\000\016\006\031\007\045\010\040" +
    "\011\046\022\047\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\113\011\046\022\047\023\035\001\001\000\016\006" +
    "\111\007\045\010\040\011\046\022\047\023\035\001\001" +
    "\000\002\001\001\000\020\006\104\007\045\010\040\011" +
    "\046\022\047\023\035\026\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\051\007\045\010\040\011\046" +
    "\022\047\023\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\055\007\045\010\040\011\046\022\047\023" +
    "\035\001\001\000\016\006\054\007\045\010\040\011\046" +
    "\022\047\023\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\103\011\046\022\047\023\035\001\001" +
    "\000\012\010\102\011\046\022\047\023\035\001\001\000" +
    "\012\010\101\011\046\022\047\023\035\001\001\000\012" +
    "\010\100\011\046\022\047\023\035\001\001\000\012\010" +
    "\077\011\046\022\047\023\035\001\001\000\012\010\076" +
    "\011\046\022\047\023\035\001\001\000\012\010\075\011" +
    "\046\022\047\023\035\001\001\000\012\010\074\011\046" +
    "\022\047\023\035\001\001\000\012\010\073\011\046\022" +
    "\047\023\035\001\001\000\012\010\072\011\046\022\047" +
    "\023\035\001\001\000\012\010\071\011\046\022\047\023" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\110\007\045\010\040\011\046" +
    "\022\047\023\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\123\007\045\010\040\011" +
    "\046\022\047\023\035\001\001\000\006\005\120\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\134\021\117\001\001\000\004\005\132\001" +
    "\001\000\016\006\130\007\045\010\040\011\046\022\047" +
    "\023\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\135\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\020\015\145\016\143\017\142\030\141" +
    "\031\144\001\001\000\014\003\020\015\145\016\143\017" +
    "\142\031\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_SD$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_SD$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_SD$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public Nodo getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_SD$actions {


    public int Index=1;
    public Nodo root;  

  private final Analizador_SD parser;

  /** Constructor */
  CUP$Analizador_SD$actions(Analizador_SD parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_SD$do_action(
    int                        CUP$Analizador_SD$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_SD$parser,
    java.util.Stack            CUP$Analizador_SD$stack,
    int                        CUP$Analizador_SD$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_SD$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_SD$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= ID 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dato ::= FALSO 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dato ::= VERDADERO 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dato ::= DECIMAL_LITERAL 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dato ::= NUM_LITERAL 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expa ::= valores_arreglo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expa ::= dato 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expa ::= APAR expl CPAR 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expa ::= MENOS expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expa ::= expa POT expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expa ::= expa DIV expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expa ::= expa POR expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expa ::= expa MENOS expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expa ::= expa MAS expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expa MAYIQ expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expa MAYQ expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expa MENIQ expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expa MENQ expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expa DIF expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expa IG_IG expa 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expl ::= expr 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expl ::= NOT expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expl ::= expl OR expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expl ::= expl AND expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion_var ::= IGUAL expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_var ::= 
            {
              Nodo RESULT =null;
		
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_id ::= ID 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_id ::= lista_id COMA ID 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= CADENA 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= BOOLEANO 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_dato ::= CARACTER 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_dato ::= DECIMAL 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_dato ::= ENTERO 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_valores ::= expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_valores",20, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_valores ::= lista_valores COMA expl 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_valores",20, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // una_dimension ::= ALLA lista_valores CLLA 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("una_dimension",17, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valores_arreglo ::= una_dimension 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("valores_arreglo",16, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // indice ::= ACORCH expl CCORCH 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indice",15, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // indices ::= indice 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indices",14, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // indices ::= indices indice 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indices",14, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_arreglo ::= ID ID indices asignacion_var PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",12, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_arreglo ::= tipo_dato ID indices asignacion_var PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",12, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_variable ::= ID lista_id asignacion_var PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_variable ::= tipo_dato lista_id asignacion_var PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= ID IGUAL expl PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // miembros ::= asignacion 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // miembros ::= declaracion_arreglo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // miembros ::= declaracion_variable 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_estructura ::= miembros 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",22, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_estructura ::= cuerpo_estructura miembros 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",22, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_estructura ::= ESTRUCT ID ALLA cuerpo_estructura CLLA 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_estructura",21, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= asignacion 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= declaracion_estructura 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion_arreglo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion_variable 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_cuerpo ::= declaraciones 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("contenido_cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenido_cuerpo ::= contenido_cuerpo declaraciones 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("contenido_cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_documento ::= contenido_cuerpo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_documento",8, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_documento ::= 
            {
              Nodo RESULT =null;
		
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_documento",8, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_documento 
            {
              Nodo RESULT =null;

              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_SD$parser.done_parsing();
          return CUP$Analizador_SD$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

